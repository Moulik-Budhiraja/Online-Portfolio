generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Blog {
  id          String    @id @default(uuid())
  title       String    @unique @db.VarChar(255)
  filename    String    @unique @db.VarChar(255)
  description String?   @db.VarChar(1000)
  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  comments    Comment[]
}

model Comment {
  id        String    @id @default(uuid())
  blogId    String
  parentId  String?   @unique
  parent    Comment?  @relation("CommentHierarchy", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  child     Comment?  @relation("CommentHierarchy")
  title     String    @db.VarChar(255)
  name      String    @db.VarChar(255)
  content   String    @db.VarChar(2000)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @updatedAt @db.Timestamp(0)
  blog      Blog?     @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([blogId], map: "fk_comments_blogId")
}

model User {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  RefreshToken RefreshToken[]
  Auth         Auth?
}

enum Role {
  USER
  ADMIN
}

model Auth {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  passwordHash String   @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}
